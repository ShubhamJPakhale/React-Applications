1. What is JSX?
=> Javascript XML is used to write clean code in react.js. Jsx is not html but it is html like syntax which contains html and javascript.
JSX is closure to javascript than html, React DOM uses camelcase property naming convention used of HTML attribut names like instead of class 
in JSX we use className etc. 
JSX prevents injection attacks before rendering them on browser. this help prevent XSS (CROSS SITE SCRIPTING)
Internally, JSX convert in to React.creteElement The hierarchy like 
JSX -> React.creteElement -> object -> HTML(DOM)
JSX convert it to React.createElement using babel compiler which is used to convert JSX code browser understandable javascript code.
example - 
const demo=<h1 id="jsx">This is JSX</h1>;
so babel convert above code to below 
React.createElement("h1", { id: "jsx" }, "This is JSX");
-------------------------
2. SuperPowers of JSX?
=> 1. Embedding expression in JSX 
2. JSX is expression too means we can use any conditional loops in jsx like js code
3. we can add attribute to JSX code and also we can add js code in curly braces
4. specify children with JSX like in props childern property will add
5. JSX prevents cross side scripting attack on application. it checks and validate data while rendering on browser.
6. jsx represents objects and it convert to React.creteElement using javascript compiler babel.
-------------
3. Role of type attribute in script tag? what options can i use there?
=> <script> element is used to embed executable code ot data. that is typically used to embed or refer to javascript code.
Type attribut in script tag with it's value -
1. module - this treate code as javascript module. code is deferred i.e.e once HTML prsign is complete then only js code execute.
2. importmap - This value indicates that the body of the element contains an import map. The import map is a JSON object that developers 
can use to control how the browser resolves module specifiers when importing 
3. blocking - This attribute explicitly indicates that certain operations should be blocked on the fetching of the script. The operations that are to be blocked must be a space-separated list of blocking attributes listed below.

render: The rendering of content on the screen is blocked.
---------------------
4. {TitleComponent} vs {<TitleComponent />} vs {<TitleComponent></TitleComponent>} in JSX?
=> 1. {TitleComponent} - It is used to add JSX code to another JSX code also used to add code to functional component.
ex. const Jsx2 = (
  <>
    {Jsx1}
    <h2>Inside Second JSX component</h2>
  </>
);

const Fcomp1 = () => {
  return (
    <div>
      {Jsx2}
      <h3>Inside Funtional component</h3>
    </div>
  );
};

const root = createRoot(document.getElementById("root"));
root.render(<Fcomp1 />);

2. {<TitleComponent />} - It is used to add functioanl component to another funtional component
ex. 
const Jsx2 = () => {
  return (
    <>
      {Jsx1}
      <h2>Inside first functional component</h2>
    </>
  );
};

const Fcomp1 = () => {
  return (
    <div>
      {<Jsx2 />}
      <h3>Inside Main Funtional component</h3>
    </div>
  );
};

const root = createRoot(document.getElementById("root"));
root.render(<Fcomp1 />);

3. {<TitleComponent></TitleComponent>} - It is used to add functioanl component to another funtonal component
ex. 
const Jsx1 = (
  <>
    <h1>Inside first jsx component</h1>
  </>
);

const Jsx2 = () => {
  return (
    <>
      {Jsx1}
      <h2>Inside first functional component</h2>
    </>
  );
};

const Fcomp1 = () => {
  return (
    <div>
      {<Jsx2></Jsx2>}
      <h3>Inside Main Funtional component</h3>
    </div>
  );
};

const root = createRoot(document.getElementById("root"));
root.render(<Fcomp1 />);
--------------------------------------



